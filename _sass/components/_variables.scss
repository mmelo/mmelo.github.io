$cubic-bezier: cubic-bezier(0,0,0.21,1);
$swiftOut: cubic-bezier(0.175, 0.885, 0.32, 1.275);

%relative-block {
	position: relative;
	display: block;
}

%flexbox {
	display: flex;
}

@mixin flex($values) {
	flex:  $values;
}

@mixin order($val) {
	order: $val;
}

@mixin flex-grow($val) {
	flex-grow: $val;
}

%flexbox-column {
	flex-direction: column;
}

%flexbox-justify-content-center {
	justify-content: center;
}

%flexbox-justify-content-end {
	justify-content: flex-end;
}

%flexbox-justify-content-space-between {
	justify-content: space-between;
}

%flexbox-align-items-center {
	align-items: center;
}

%flexbox-align-items-top {
	align-items: flex-start;
}

%flexbox-align-items-baseline {
	align-items: baseline;
}

%flexbox-wrap {
	flex-wrap: wrap;
}

// hack - improve scrolling performance on mobile android browsers and mobile safari
%backface-hack {
	backface-visibility: hidden;
}

%padding {
	padding: 16px;
}

%z-base {
	z-index: 1;
}
%z-app-bar {
	z-index: 2;
}
%z-status-bar {
	z-index: 3;
}
%z-modal {
	z-index: 4;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}